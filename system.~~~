;
; Built-in operations
;
;vref ref pass(ints) pass(default) are to be defined in compiler (same as [if loop add var] etc)
vref = : _content_`vref _content_
ref = : _content_`ref _content_
pass = : _content_`ref _content_

add=: a`ref(0) b`ref(0)
	'((%a)+(%b))'
	0
sub=: `ref(0) `ref(0) 0
div=: `ref(0) `ref(0) 0
mul=: `ref(0) `ref(0) 0
bitAnd=: `ref(0) `ref(0) 0
bitOr=: `ref(0) `ref(0) 0
negate=: `ref(0) 0
cmp=: `ref(0) `ref(0) 0
gt= : a`ref(0) b`ref(0) false
eq= : a`ref(0) b`ref(0) false
postIncrement=: v`vref(0) 0
postDecrement=: v`vref(0) 0

add=: `ref(0.0) `ref(0.0) 0.0
sub=: `ref(0.0) `ref(0.0) 0.0
div=: `ref(0.0) `ref(0.0) 0
mul=: `ref(0.0) `ref(0.0) 0
negate=: `ref(0.0) 0.0
cmp=: `ref(0.0) `ref(0.0) 0
gt=: `ref(0.0) `ref(0.0) false
eq=: `ref(0.0) `ref(0.0) false
postIncrement=: v`vref(0.0) 0.0
postDecrement=: v`vref(0.0) 0.0

not=: `ref(false) false
and=: a`ref b`ref(:a) a
or= : a`ref b`ref(:a) a

setOp=: a`vref op`ref b`ref a.set(op(a.get b))
concatenate=: a`ref _params_`ref ""
if=: `ref(false) then`ref .
if=: `ref(false) then`ref else`ref ;(: then.)
	then.
	else.
while=: condition`ref(:false) do`ref(:.) .
var=: _content_`ref #
	get _content_
	set: newV`ref(_content_) _content_

fixedList=: first`ref _params_`ref
	'fixedList'
	#
		size 0
		iterator #
			toBool false
			current first
			next .
		at: i`ref(0) first
;
; Type aliases and std operations
;
int=0
str=""
bool=false
void=.
echo=: text`ref(str)
	'puts(%text)'
	.
rand=:int
copy=:
	from`ref
	to`vref
	.

array=:
	size`ref(int)
	itemType`ref
	#
		at: index`ref(int)
			var(itemType)
		. [ref(itemType)]
rangeStep=:
	from`ref
	to`ref
	step`ref
	[ref(from)]
for=:
	list`ref
	do`ref
	
	i = ref(list.iterator)
	i.toBool
	i.next
	do i.current
	.
contains=:
	list`ref
	val`ref
	bool
keyValue=: key`ref value`ref ##
at=: array`ref index`ref(0) array[index]
switch=:
	val`ref
	cases ` ref([ref(keyValue(val`ref ref(:else.)))])
	else`ref
	else.
;
; GUI
;
Widget=#
	this var Widget
	paint : `ref(Canvas) .
	onKey : key`ref(int) .
	close .

Timer=:
	time  ` ref(int)
	actor ` ref(:.)
	#
		pause .
		start .

key=#
	up    1
	down  2
	left  3
	right 4

color=#
	white 0xffffff
	black 0

Screen=#
	add: `ref(Widget) .
	w 640
	h 480

Canvas=#
	fillRect:
		x     ` ref(int)
		y     ` ref(int)
		w     ` ref(int)
		color ` ref(int)
		void

Window=:
	title  ` ref(str)
	width  ` ref(int)
	height ` ref(int)
	this = var #this
		. Widget
